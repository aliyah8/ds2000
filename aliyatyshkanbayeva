# ds2000hw1
Homework 1 for DS2000
# Aliya Tyshkanbayeva
# homework 1

#Here is the major function you need to write
#it takes in an integer and returns True or False
#depending on whether or not it is a valid date
#You should probably have it call other funcitons,
#for example you may want to create some other
#function that figures out proper number of
#days in a month
def isValidDate(date):
    isValid = False
    if (isValidYear(date) == True and isValidMonth(date) == True 
        and isValidDay(date) == True):
        isValid = True   
    return isValid

#Given integer date returns
#the month as an integer
def getMonth(date):
    return (date//100)%100

#Given integer date returns
#the year as an integer
def getYear(date):
    return date//10000  

#Given integer date returns
#the day as an integer
def getDay(date):
    return date%100


#the helper function to check if the month is within the possible range
def isValidMonth(date):
    isValid = False
    if(getMonth(date) < 13 and getMonth(date) > 0):
        isValid = True
    return isValid


# the helper function to check that the year in the date is within the range of
# the calendar
def isValidYear(date):
    isValid = False
    if(getYear(date) >= 1752 and getYear(date) <= 2018):
        isValid = True
    return isValid

# the helper function to check that the date is within the range of every month
# for example April (30 days) , July (31 days) 
# also a condition to check that February does not consist of more than 29 days
def isValidDay(date):
    # setting a variable isValid to keep track of validity of days to False
    isValid = False 
    # checking if the date is valid
    if(getDay(date) <= 31 and getDay(date) > 0):
        # narrowing to check if the given february date is a leap year
        if(getDay(date) == 29 and isLeap(getYear(date)) == True):
            isValid = True    
    # checking the boundaries of February not counting the leap year cases
    if(getDay(date) < 29 and getMonth(date) == 2):
        isValid = True
    # checking the validity of days which fall to april, june, september, 
    # november
    if(getDay(date) < 31 and getDay(date) > 0 and (getMonth(date) == 4 or 
                                                   getMonth(date) == 6 or 
                                                   getMonth(date) == 9 or
                                                   getMonth(date) == 11)):
        isValid = True
        
    # checking the validity of days which fall to january, march, may, july, 
    # august, october and december
    if (getDay(date) < 32 and getDay(date) > 0 and (getMonth(date) == 1 or 
                                                    getMonth(date) == 3 or 
                                                    getMonth(date) == 5 or
                                                    getMonth(date) == 7 or 
                                                    getMonth(date) == 8 or
                                                    getMonth(date) == 10 or 
                                                    getMonth(date) == 12)):
        isValid = True
    return isValid

#Here is the leap year
#function we did in class

def isLeap(year):
    leap = False
    if((year % 400) == 0):
        leap = True
    elif((year % 100) == 0):
        leap = False
    elif((year % 4) == 0):
        leap = True
    return leap

def main():
    # getting the Month of the date        
    print(getMonth(19980229))
    # getting the Year of the date        
    print(getYear(19980229))
    # getting the day of the date    
    print(getDay(19980229))
    # getting the Month of the date        
    print(getMonth(20110311))
    # getting the Year of the date        
    print(getYear(20140222))
    # getting the day of the date
    print(getDay(20180115))
    # the test case for invalid month
    print('For 20181401 isValidMonth returns {}'.format(isValidMonth(20181401)))
    # the test case for invalid year
    print('For 1720101 isValidYear returns {}'.format(isValidYear(1720101)))
    # the test case with valid year and valid month
    print('For 19200226 isValidYear returns {}'.format(isValidYear(19200226)))
    # the test case for a valid Day for the leap year
    print('For 19200226 isValidDay returns {}'.format(isValidDay(19200226)))
    # the test case with invalid day for not leap year
    print('For 20180101 isValidDate returns {}'.format(isValidDate(20180101)))
    # the test case for a leap year
    print('For 20160229 isValidDate returns {}'.format(isValidDate(20160229)))
    # the test case for not a leap year
    print('For 20150229 isValidDate returns {}'.format(isValidDate(20150229)))
    # the test case for invalid date
    print('For 20160230 isValidDate returns {}'.format(isValidDate(20160230)))
    # the test case for invalid year
    print('For 10000703 isValidDate returns {}'.format(isValidDate(10000703)))
    # teh test case for not a leap year
    print('For 20170229 isValidDate returns {}'.format(isValidDate(20130229)))
    # the test case for a leap year
    print('For 19800229 isValidDate returns {}'.format(isValidDate(19800229)))
    # the test case for invalid month
    print('For 20170001 isValidDate returns {}'.format(isValidDate(20170001)))
    # the test case for invalid day
    print('For 20150199 isValidDate returns {}'.format(isValidDate(20150199)))
    # valid date
    print('For 20150118 isValidDate returns {}'.format(isValidDate(20150118)))
    # invalid day
    print('For 20151232 isValidDate returns {}'.format(isValidDate(20151232)))
    # invalid day for April, since April only has 30 days
    print('For 20150431 isValidDate returns {}'.format(isValidDate(20150431)))
    # valid date
    print('For 20150531 isValidDate returns {}'.format(isValidDate(20150531)))
    
    
       
main()
